package com.TodoArte.JPAControllerClasses;
/*
reemplazar
<<NombreClase>>
por el nombre de la clase

reemplazar
<<NombreVariable>>
por el nombre de la clase

*/
import JPAControllerClasses.exceptions.NonexistentEntityException;

import com.TodoArte.Classes.<<NombreClase>>;
import java.io.Serializable;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Query;
import javax.persistence.EntityNotFoundException;
import javax.persistence.Persistence;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

public class <<NombreClase>>JpaController implements Serializable {

	public <<NombreClase>>JpaController() {
        this.emf = Persistence.createEntityManagerFactory(PersistenceUnitName.getPersistenceUnitName());
    }
    
    public <<NombreClase>>JpaController(EntityManagerFactory emf) {
        this.emf = emf;
    }
    private EntityManagerFactory emf = null;

    public EntityManager getEntityManager() {
        return emf.createEntityManager();
    }

    public void create(<<NombreClase>> <<NombreVariable>>) {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            em.persist(<<NombreVariable>>);
            em.getTransaction().commit();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public void edit(<<NombreClase>> <<NombreVariable>>) throws NonexistentEntityException, Exception {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            <<NombreVariable>> = em.merge(<<NombreVariable>>);
            em.getTransaction().commit();
        } catch (Exception ex) {
            String msg = ex.getLocalizedMessage();
            if (msg == null || msg.length() == 0) {
                int id = <<NombreVariable>>.getId();
                if (find<<NombreClase>>(id) == null) {
                    throw new NonexistentEntityException("The <<NombreVariable>> with id " + id + " no longer exists.");
                }
            }
            throw ex;
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public void destroy(int id) throws NonexistentEntityException {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            <<NombreClase>> <<NombreVariable>>;
            try {
                <<NombreVariable>> = em.getReference(<<NombreClase>>.class, id);
                <<NombreVariable>>.getId();
            } catch (EntityNotFoundException enfe) {
                throw new NonexistentEntityException("The <<NombreVariable>> with id " + id + " no longer exists.", enfe);
            }
            em.remove(<<NombreVariable>>);
            em.getTransaction().commit();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public List<<<NombreClase>>> find<<NombreClase>>Entities() {
        return find<<NombreClase>>Entities(true, -1, -1);
    }

    public List<<<NombreClase>>> find<<NombreClase>>Entities(int maxResults, int firstResult) {
        return find<<NombreClase>>Entities(false, maxResults, firstResult);
    }

    private List<<<NombreClase>>> find<<NombreClase>>Entities(boolean all, int maxResults, int firstResult) {
        EntityManager em = getEntityManager();
        try {
            CriteriaQuery cq = em.getCriteriaBuilder().createQuery();
            cq.select(cq.from(<<NombreClase>>.class));
            Query q = em.createQuery(cq);
            if (!all) {
                q.setMaxResults(maxResults);
                q.setFirstResult(firstResult);
            }
            return q.getResultList();
        } finally {
            em.close();
        }
    }

    public <<NombreClase>> find<<NombreClase>>(int id) {
        EntityManager em = getEntityManager();
        try {
            return em.find(<<NombreClase>>.class, id);
        } finally {
            em.close();
        }
    }

    public int get<<NombreClase>>Count() {
        EntityManager em = getEntityManager();
        try {
            CriteriaQuery cq = em.getCriteriaBuilder().createQuery();
            Root<<<NombreClase>>> rt = cq.from(<<NombreClase>>.class);
            cq.select(em.getCriteriaBuilder().count(rt));
            Query q = em.createQuery(cq);
            return ((Long) q.getSingleResult()).intValue();
        } finally {
            em.close();
        }
    }
}
